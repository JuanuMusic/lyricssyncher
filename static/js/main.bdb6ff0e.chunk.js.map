{"version":3,"sources":["components/LyricsEditor.js","components/LyricsSyncher.js","components/AudioSelect.js","App.js","serviceWorker.js","index.js"],"names":["LyricsEditor","props","Form","FormGroup","Input","type","name","id","aria-label","rows","onChange","e","target","value","LyricsSyncher","useState","data","setData","url","URL","createObjectURL","filePath","Audio","audio","currentStart","setCurrentStart","currentLine","setCurrentLine","isRecordingLyric","setIsRecordingLyrics","lyrics","split","useEffect","console","log","onKeyDown","event","keyCode","preventDefault","repeat","currentTime","onKeyUp","paused","newData","line","start","end","prevData","nextLine","i","length","trim","document","addEventListener","removeEventListener","Container","Row","ButtonGroup","Button","onClick","play","pause","output","JSON","stringify","file","Blob","tmpLink","createElement","href","setAttribute","click","map","itm","index","isEmpty","style","marginBottom","fontWeight","key","display","className","margin","AudioSelect","files","App","step","setStep","setLyrics","audioFilePath","setAudioFilePath","onLyricsChanged","onAudioFileChanged","path","Col","Jumbotron","lg","size","offset","md","getCurrentComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bdb6ff0e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Input, Label, FormGroup, Form, Container, Row, Col } from 'reactstrap';\r\n\r\nfunction LyricsEditor(props) {\r\n\r\n    function handleLyricsChanged(e) {\r\n        if (props.onChange) props.onChange(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h5>Type or paste your lyrics below and click on \"Next Step\"</h5>\r\n            <Form>\r\n                <FormGroup>\r\n                    <Input type=\"textarea\" name=\"lyrics\" id=\"lyricsField\" aria-label=\"lyrics\" rows={10} onChange={handleLyricsChanged} />\r\n                </FormGroup>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LyricsEditor;","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport ReactAudioPlayer from \"react-audio-player\";\r\nimport { Label, Button, Container, Row, ButtonGroup } from \"reactstrap\";\r\n\r\n\r\n\r\nfunction LyricsSyncher(props) {\r\n\r\n    const [data, setData] = useState([]);\r\n    const url = URL.createObjectURL(props.filePath);\r\n    const [audio, setAudio] = useState(new Audio(url));\r\n    const [currentStart, setCurrentStart] = useState();\r\n    const [currentLine, setCurrentLine] = useState(0);\r\n    const [isRecordingLyric, setIsRecordingLyrics] = useState(false);\r\n    const lyrics = props.lyrics.split('\\n');\r\n\r\n    useEffect(() => {\r\n        console.log(lyrics);\r\n        const onKeyDown = (event) => {\r\n            if (event.keyCode === 32) {\r\n                event.preventDefault();\r\n                if (event.repeat) return;\r\n                setIsRecordingLyrics(true);\r\n                setCurrentStart(audio.currentTime);\r\n            }\r\n        };\r\n\r\n        const onKeyUp = (event) => {\r\n            if (event.keyCode === 32) {\r\n                event.preventDefault();\r\n\r\n                if (event.repeat) return;\r\n\r\n\r\n                // Make sure the audio is playing.\r\n                if (audio.paused) return;\r\n\r\n                // New data\r\n                const newData = { line: lyrics[currentLine], start: currentStart, end: audio.currentTime };\r\n                //Update data.\r\n                setData(prevData => [...prevData, newData]);\r\n\r\n\r\n                let nextLine = 0;\r\n                // Increase current line if possible\r\n                for (let i = currentLine; i < lyrics.length; i++) {\r\n                    nextLine = i + 1;\r\n                    if (lyrics[nextLine].trim() !== '') {\r\n\r\n                        break;\r\n                    }\r\n                }\r\n                setCurrentLine(nextLine);\r\n                setIsRecordingLyrics(false);\r\n            }\r\n        };\r\n\r\n        document.addEventListener(\"keydown\", onKeyDown, false);\r\n        document.addEventListener(\"keyup\", onKeyUp, false);\r\n\r\n\r\n        return () => {\r\n            document.removeEventListener(\"keyup\", onKeyUp, false);\r\n            document.removeEventListener(\"keydown\", onKeyDown, false);\r\n        };\r\n    }, [currentStart, data, currentLine]);\r\n\r\n    function onResetClick(e) {\r\n        audio.pause();\r\n        audio.currentTime = 0;\r\n        setCurrentLine(0);\r\n        setData([]);\r\n    }\r\n\r\n    function onSaveClick(e) {\r\n        const output = JSON.stringify(data);\r\n        const file = new Blob([output], { type: 'text/json' });\r\n        const tmpLink = document.createElement(\"a\");\r\n        tmpLink.href = URL.createObjectURL(file);\r\n        tmpLink.setAttribute('download', 'synched_lyrics.json');\r\n        tmpLink.click();\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Row>\r\n                    <h3>Instructions</h3>\r\n                    <ul>\r\n                        <li>Click on play audio</li>                        \r\n                        <li>Pres and hold space bar when lyric line starts</li>\r\n                        <li>Release space bar when lyric line ends</li>\r\n                        <li>When finished, click on Save to download the json file</li>\r\n                        <li>If you make a mistake, click on reset to stop the audio and clear the data</li>\r\n                    </ul>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <ButtonGroup>\r\n                        <Button onClick={() => audio.play()}>Play audio</Button>\r\n                        <Button onClick={onResetClick}>Reset</Button>\r\n                        <Button onClick={onSaveClick}>Save</Button>\r\n                    </ButtonGroup>\r\n                </Row>\r\n                {lyrics.map((itm, index) => {\r\n                    const isEmpty = itm.trim() === '';\r\n                    const style = {marginBottom: 0};\r\n                    if(index === currentLine && isRecordingLyric)\r\n                        style.fontWeight = 'bold';\r\n                    return (<Row key={index} style={isEmpty ? {display: 'block'} : {}} className=\"text-center\">\r\n                        {isEmpty ? <div style={{margin: '20px'}}></div> : <p style={style}>{itm}</p>}\r\n                    </Row>);\r\n                })}\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LyricsSyncher;","import React, { useState } from \"react\";\r\nimport { Label, Button, Input } from \"reactstrap\";\r\nimport { readdirSync, read } from \"fs\";\r\n//const { dialog } = window.require(\"electron\").remote;\r\n//const url = window.require(\"url\");\r\nfunction AudioSelect(props) {\r\n\r\n    const [path, setPath] = useState('');\r\n\r\n    function onSelectedFileChanged(e) {\r\n        props.onChange(e.target.files[0]);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div style={{marginBottom: '20px'}}>\r\n                <h5>Select your audio file</h5>\r\n                <Input type=\"file\" onChange={onSelectedFileChanged}></Input>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AudioSelect;","import React, { useState } from 'react';\nimport './App.css';\nimport { Jumbotron, Button, Input, Label, FormGroup, Form, Container, Row, Col } from 'reactstrap';\nimport LyricsEditor from './components/LyricsEditor';\nimport LyricsSyncher from './components/LyricsSyncher';\nimport AudioSelect from './components/AudioSelect';\n\nfunction App() {\n  const [step, setStep] = useState(1);\n  const [lyrics, setLyrics] = useState('');\n  const [audioFilePath, setAudioFilePath] = useState('');\n\n  function onNextStepClicked(e) {\n    if (step === 3)\n      setStep(0);\n    else\n      setStep(step + 1);\n\n  }\n\n  function onLyricsChanged(lyrics) {\n    setLyrics(lyrics);\n  }\n\n  function onAudioFileChanged(path) {\n    setAudioFilePath(path);\n  }\n\n  function getCurrentComponent() {\n    switch (step) {\n      case 1:\n        return <LyricsEditor onChange={onLyricsChanged} />\n      case 2:\n        return <AudioSelect onChange={onAudioFileChanged} />\n      case 3:\n        return <LyricsSyncher lyrics={lyrics} filePath={audioFilePath} />\n      default:\n        return <></>\n    }\n  }\n\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col>\n            <Jumbotron>\n              <h1 className=\"display-3\">Lyrics Syncher</h1>\n              <p className=\"lead\">A simple and fast way to generate a lyrics file synched to an audio file.</p>\n              <hr className=\"my-2\" />\n              <p>Enter your lyrics, select your audio, sync and download!</p>\n              <small>Developed by <a href=\"https://www.github.com/juanumusic\">Juanu Haedo</a></small>\n            </Jumbotron>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={{ size: 6, offset: 3 }} md={12}>\n            {getCurrentComponent()}\n            <Button onClick={onNextStepClicked}>Next step</Button>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}